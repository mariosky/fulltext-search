from bs4 import BeautifulSoup
html = """
<h2> <a id="user-content-ejercicio-setosa-virginica-o-versicolor" class="anchor" href="#ejercicio-setosa-virginica-o-versicolor" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a> Ejercicio: ¿Setosa, Virginica o Versicolor?</h2>
<p>En esta sección vamos a hacer un ejercicio práctico del proceso de KDD. Utilizaremos Python y algunas de las bibliotecas que utilizaremos a lo largo del libro. Al terminar el ejercicio tendrás una idea del tipo de programación que se requiere para el análisis de datos en Python.</p>
<h4> <a id="user-content-nota" class="anchor" href="#nota" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Nota:</h4>
<p>Para realizar los ejercicios debes tener previamente instalada la distribución <a href="https://www.continuum.io/downloads" rel="nofollow">Anaconda</a> con python 2.7. En caso de que requieras ayuda en la instalación o alguna de las instrucciones, visita antes la sección [Python para Análisis de Datos].</p>
<p>Como primer ejercicio vamos a seguir el proceso de KDD para extraer conocimiento a partir del famoso <a href="">conjunto de datos de flores Iris</a>. El conjunto de datos incluso cuenta con su propia entrada en <a href="https://es.wikipedia.org/wiki/Iris_flor_conjunto_de_datos" rel="nofollow">wikipedia</a>. El conjunto de datos fue introducido por Ronald Fisher para un artículo en 1936. Contiene 50 muestras de tres especies de la flor Iris (Iris setosa, Iris virginica e Iris versicolor). Fisher midió cuatro características de cada muestra: el largo y ancho del sépalo y el largo y ancho del pétalo, en centímetros. Basado en la combinación de estos cuatro rasgos, Fisher desarrolló un modelo discriminante lineal para distinguir entre una especie y otra. Como ejemplo veamos un fragmento que incluye varios registros de cada flor:</p>
<h4> <a id="user-content-irisdata" class="anchor" href="#irisdata" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>iris.data</h4>
<pre>
<code>sepal_length,sepal_width,petal_length,petal_width,species
5.1,3.5,1.4,0.2,setosa
4.9,3.0,1.4,0.2,setosa
4.7,3.2,1.3,0.2,setosa
4.6,3.1,1.5,0.2,setosa
7.0,3.2,4.7,1.4,versicolor
6.4,3.2,4.5,1.5,versicolor
6.9,3.1,4.9,1.5,versicolor
5.5,2.3,4.0,1.3,versicolor
6.5,2.8,4.6,1.5,versicolor
6.3,3.3,6.0,2.5,virginica
5.8,2.7,5.1,1.9,virginica
7.1,3.0,5.9,2.1,virginica
6.3,2.9,5.6,1.8,virginica
6.5,3.0,5.8,2.2,virginica
</code></pre>

<p>Para compartir los conjuntos de datos normalmente se utilizan archivos en formato texto. En este caso el <em>dataset</em> se encuentra en formato CSV (<em>comma-separated values</em>) con el cual es muy fácil representar datos tabulares. Los archivos CSV se pueden abrir e importar sin ningún problema a hojas de cálculo y sistemas de bases de datos. Como podemos ver en el ejemplo, los registros están separados por saltos de línea, y en la primera se indica el nombre de la columna. En este caso cada registro cuenta con cinco campos. Los primeros cuatro son las lecturas correspondientes en centímetros y el último es muy importante ya que es la etiqueta o clase. En este caso en particular la etiqueta indica el tipo de flor.</p>

<h3> <a id="user-content-paso-1-identificar-el-objetivo" class="anchor" href="#paso-1-identificar-el-objetivo" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 1: identificar el objetivo</h3>
<p>El objetivo del proceso de KDD será encontrar algunos patrones que nos permitan clasificar las flores, o algún otro conocimiento nuevo.</p>
<h3> <a id="user-content-paso-2-seleccionar-y-recolectar" class="anchor" href="#paso-2-seleccionar-y-recolectar" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 2: seleccionar y recolectar</h3>
<p>En este caso lo que debemos hacer es simplemente bajarnos el archivo <em>iris.csv</em> de alguna parte. Esto lo podemos hacer manualmente o directamente con Python.</p>
<h4>
<a id="user-content-recolectar-archivo-irisdata" class="anchor" href="#recolectar-archivo-irisdata" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Recolectar archivo iris.data</h4>
<p>Esto lo vamos a hacer de manera interactiva desde el intérprete. Para ejecutar el intérprete simplemente escribimos <code>python</code> en la línea de comandos.</p>
<p>El intérprete nos da la bienvenida:</p>
<pre><code>Python 2.7.13 |Anaconda custom (x86_64)| (default, Dec 20 2016, 23:05:08)
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://anaconda.org
&gt;&gt;&gt;
</code></pre>
<p>El archivo lo podemos bajar del Machine Learning Repository de la UCI (University of California Irvine). La URL directa es la siguiente:
<a href="https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data" rel="nofollow">https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data</a>. Me ha tocado algunas veces que no está disponible el servidor, si esto sucede descárgalo de algún otro lado.</p>
<p>Para bajarlo utilizaremos la biblioteca de Python <a href="http://docs.python-requests.org/en/master/" rel="nofollow"><code>requests</code></a>. Esta biblioteca ya viene instalada en Anaconda. Solamente tenemos que importarla:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">requests</span></pre></div>
<p>Hacemos la petición <em>get</em> al archivo (esto puede tardar unos segundos):</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">r</span> <span class="pl-c1">=</span> <span class="pl-s1">requests</span>.<span class="pl-en">get</span>(<span class="pl-s">'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'</span>)</pre></div>
<p>Imprimimos el texto para ver que se haya bajado bien. Se debería ver algo como esto (es un fragmento):</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">r</span>.<span class="pl-s1">text</span>
<span class="pl-s">u'5.7,3.8,1.7,0.3,Iris-setosa<span class="pl-cce">\n</span>5.1,3.8,1.5,0.3,Iris-setosa<span class="pl-cce">\n</span>5.4,3.4,1.7,0.2,Iris-setosa<span class="pl-cce">\n</span>5.1,3.7,1.5,0.4,Iris-versicolor<span class="pl-cce">\n</span>5.8,2.7,3.9,1.2,Iris-versicolor<span class="pl-cce">\n</span>6.0,2.7,5.1,1.6,Iris-versicolor<span class="pl-cce">\n</span>5.4,3.0,4.5,1.5,Iris-versicolor<span class="pl-cce">\n</span>6.0,3.4,4.5,1.6,Iris-versicolor<span class="pl-cce">\n</span>6.7,3.1,4.7,1.5,Iris-versicolor<span class="pl-cce">\n</span>6.3,2.3,4.4,1.3,Iris-versicolor<span class="pl-cce">\n</span>5.6,3.0,4.1,1.3,Iris-versicolor<span class="pl-cce">\n</span>5.5,2.5,4.0,1.3,Iris-versicolor<span class="pl-cce">\n</span>5.5,2.6,4.4,1.2,Iris-versicolor<span class="pl-cce">\n</span>6.1,3.0,4.6,1.4,Iris-versicolor<span class="pl-cce">\n</span>5.8,2.6,4.0,1.2,Iris-versicolor<span class="pl-cce">\n</span>5.0,2.3,3.3,1.0,Iris-versicolor<span class="pl-cce">\n</span>5.6,2.7,4.2,1.3,Iris-versicolor<span class="pl-cce">\n</span>5.7,3.0,4.2,1.2,Iris-versicolor<span class="pl-cce">\n</span>5.7,2.9,4.2,1.3,Iris-versicolor<span class="pl-cce">\n</span>6.2,2.9,4.3,1.3,Iris-versicolor<span class="pl-cce">\n</span>5.1,2.5,3.0,1.1,Iris-versicolor<span class="pl-cce">\n</span>5.7,2.8,4.1,1.3,Iris-versicolor<span class="pl-cce">\n</span>6.3,3.3,6.0,2.5,Iris-virginica<span class="pl-cce">\n</span>5.8,2.7,5.1,1.9,Iris-virginica<span class="pl-cce">\n</span>7.1,3.0,5.9,2.1,.2,Iris-virginica<span class="pl-cce">\n</span>6.3,2.8,5.1,1.5,Iris-virginica<span class="pl-cce">\n</span>6.1,2.6,5.6,1.4,Iris-virginica<span class="pl-cce">\n</span>7.7,3.0,6.1,2.3,Iris-virginica<span class="pl-cce">\n</span>6.3,3.4,5.6,2.4,Iris-virginica<span class="pl-cce">\n</span>6.4,3.1,5.5,1.8,Iris-virginica<span class="pl-cce">\n</span>6.0,3.0,4.8,1.8,Iris-virginica<span class="pl-cce">\n</span>6.9,3.1,5.4,2.1,Iris-virginica<span class="pl-cce">\n</span>6.7,3.1,5.6,2.4,Iris-virginica<span class="pl-cce">\n</span>6.9,3.1,5.1,2.3,Iris-virginica<span class="pl-cce">\n</span>5.8,2.7,5.1,1.9,Iris-virginica<span class="pl-cce">\n</span>6.8,3.2,5.9,2.3,Iris-virginica<span class="pl-cce">\n</span>6.7,3.3,5.7,2.5,Iris-virginica<span class="pl-cce">\n</span>6.7,3.0,5.2,2.3,Iris-virginica<span class="pl-cce">\n</span>6.3,2.5,5.0,1.9,Iris-virginica<span class="pl-cce">\n</span>6.5,3.0,5.2,2.0,Iris-virginica<span class="pl-cce">\n</span>6.2,3.4,5.4,2.3,Iris-virginica<span class="pl-cce">\n</span>5.9,3.0,5.1,1.8,Iris-virginica<span class="pl-cce">\n</span><span class="pl-cce">\n</span>'</span></pre></div>
<p>¡Muy bien!, a lo que sigue.</p>
<h3>
<a id="user-content-paso-3-preprocesar-los-datos" class="anchor" href="#paso-3-preprocesar-los-datos" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 3: Preprocesar los datos.</h3>
<p>Una cadena enorme contiene todos los datos. Esto no nos sirven de mucho. El objetivo de este paso será procesar la cadena para tener como resultado un arreglo multidimensional de NumPy <a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" rel="nofollow">QuickStart</a>. Este tipo de arreglos nos permite leer secciones a lo largo y ancho lo cual será muy útil en nuestro análisis. Más adelante veremos otras bibliotecas que simplificarán aun más este proceso como la biblioteca de análisis de datos <a href="http://pandas.pydata.org/" rel="nofollow">Pandas</a>.</p>
<p>Empezaremos por crear una lista a partir de una separación de la cadena. Esto lo hacemos con el método split() separando la cadena por los saltos de línea ('\n'):</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">renglones_iris</span> <span class="pl-c1">=</span> <span class="pl-s1">r</span>.<span class="pl-s1">text</span>.<span class="pl-en">split</span>(<span class="pl-s">'<span class="pl-cce">\n</span>'</span>)</pre></div>
<p>Revisemos un poco el contenido de la lista:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">renglones_iris</span>[:<span class="pl-c1">5</span>]
[<span class="pl-s">u'5.1,3.5,1.4,0.2,Iris-setosa'</span>, <span class="pl-s">u'4.9,3.0,1.4,0.2,Iris-setosa'</span>, <span class="pl-s">u'4.7,3.2,1.3,0.2,Iris-setosa'</span>, <span class="pl-s">u'4.6,3.1,1.5,0.2,Iris-setosa'</span>, <span class="pl-s">u'5.0,3.6,1.4,0.2,Iris-setosa'</span>]</pre></div>
<p>Podemos ver un detalle importante al final de la lista: los últimos dos renglones están vacíos:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">renglones_iris</span>[<span class="pl-c1">-</span><span class="pl-c1">4</span>:]
[<span class="pl-s">u'6.2,3.4,5.4,2.3,Iris-virginica'</span>, <span class="pl-s">u'5.9,3.0,5.1,1.8,Iris-virginica'</span>, <span class="pl-s">u''</span>, <span class="pl-s">u''</span>]</pre></div>
<p>Observamos también que cada uno de los elementos de la lista a su vez está separado por comas y no necesitamos el último dato ya que queremos solo las medidas en centímetros. Lo que queremos entonces es crear una nueva lista a partir de renglones_iris que tenga como elementos a su vez listas con las medidas. Para esto utilizaremos <a href="">comprensión de listas</a>. Primero vamos a hacer algunas pruebas:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> [ <span class="pl-s1">renglon</span>.<span class="pl-en">split</span>(<span class="pl-s">','</span>)[:<span class="pl-c1">-</span><span class="pl-c1">1</span>] <span class="pl-k">for</span> <span class="pl-s1">renglon</span> <span class="pl-c1">in</span> <span class="pl-s1">renglones_iris</span>[:<span class="pl-c1">-</span><span class="pl-c1">2</span>]]
[[<span class="pl-s">u'5.1'</span>, <span class="pl-s">u'3.5'</span>, <span class="pl-s">u'1.4'</span>, <span class="pl-s">u'0.2'</span>], [<span class="pl-s">u'4.9'</span>, <span class="pl-s">u'3.0'</span>, <span class="pl-s">u'1.4'</span>, <span class="pl-s">u'0.2'</span>], [<span class="pl-s">u'5.0'</span>, <span class="pl-s">u'3.3'</span>, <span class="pl-s">u'1.4'</span>, <span class="pl-s">u'0.2'</span>], [<span class="pl-s">u'7.0'</span>, <span class="pl-s">u'3.2'</span>, <span class="pl-s">u'4.7'</span>, <span class="pl-s">u'1.4'</span>], [<span class="pl-s">u'6.4'</span>, <span class="pl-s">u'3.2'</span>, <span class="pl-s">u'4.5'</span>, <span class="pl-s">u'1.5'</span>], [<span class="pl-s">u'6.9'</span>, <span class="pl-s">u'3.1'</span>, <span class="pl-s">u'4.9'</span>, <span class="pl-s">u'1.5'</span>], [<span class="pl-s">u'5.5'</span>, <span class="pl-s">u'2.3'</span>, <span class="pl-s">u'4.0'</span>, <span class="pl-s">u'1.3'</span>], [<span class="pl-s">u'6.5'</span>, <span class="pl-s">u'2.8'</span>, <span class="pl-s">u'4.6'</span>, <span class="pl-s">u'1.5'</span>], [<span class="pl-s">u'5.7'</span>, <span class="pl-s">u'2.8'</span>, <span class="pl-s">u'4.5'</span>, <span class="pl-s">u'1.3'</span>], [<span class="pl-s">u'6.3'</span>, <span class="pl-s">u'3.3'</span>, <span class="pl-s">u'4.7'</span>, <span class="pl-s">u'1.6'</span>], [<span class="pl-s">u'4.9'</span>, <span class="pl-s">u'2.4'</span>, <span class="pl-s">u'3.3'</span>, <span class="pl-s">u'1.0'</span>], [<span class="pl-s">u'6.6'</span>, <span class="pl-s">u'2.9'</span>, <span class="pl-s">u'4.6'</span>, <span class="pl-s">u'1.3'</span>], [<span class="pl-s">u'5.2'</span>, <span class="pl-s">u'2.7'</span>, <span class="pl-s">u'3.9'</span>, <span class="pl-s">u'1.4'</span>], [<span class="pl-s">u'5.0'</span>, <span class="pl-s">u'2.0'</span>, <span class="pl-s">u'3.5'</span>, <span class="pl-s">u'1.0'</span>], [<span class="pl-s">u'5.9'</span>, <span class="pl-s">u'3.0'</span>, <span class="pl-s">u'4.2'</span>, <span class="pl-s">u'1.5'</span>], [<span class="pl-s">u'6.0'</span>, <span class="pl-s">u'2.2'</span>, <span class="pl-s">u'4.0'</span>, <span class="pl-s">u'1.0'</span>], [<span class="pl-s">u'6.1'</span>, <span class="pl-s">u'2.9'</span>, <span class="pl-s">u'4.7'</span>, <span class="pl-s">u'1.4'</span>], [<span class="pl-s">u'5.6'</span>, <span class="pl-s">u'2.9'</span>, <span class="pl-s">u'3.6'</span>, <span class="pl-s">u'1.3'</span>],  [<span class="pl-s">u'6.7'</span>, <span class="pl-s">u'3.3'</span>, <span class="pl-s">u'5.7'</span>, <span class="pl-s">u'2.5'</span>], [<span class="pl-s">u'6.7'</span>, <span class="pl-s">u'3.0'</span>, <span class="pl-s">u'5.2'</span>, <span class="pl-s">u'2.3'</span>], [<span class="pl-s">u'6.3'</span>, <span class="pl-s">u'2.5'</span>, <span class="pl-s">u'5.0'</span>, <span class="pl-s">u'1.9'</span>], [<span class="pl-s">u'6.5'</span>, <span class="pl-s">u'3.0'</span>, <span class="pl-s">u'5.2'</span>, <span class="pl-s">u'2.0'</span>], [<span class="pl-s">u'6.2'</span>, <span class="pl-s">u'3.4'</span>, <span class="pl-s">u'5.4'</span>, <span class="pl-s">u'2.3'</span>], [<span class="pl-s">u'5.9'</span>, <span class="pl-s">u'3.0'</span>, <span class="pl-s">u'5.1'</span>, <span class="pl-s">u'1.8'</span>]]</pre></div>
<p>Lo que estamos haciendo es lo siguiente: a partir de la lista renglones_iris menos sus últimos dos elementos (renglones_iris[:-2]) vamos a generar una lista nueva procesando cada uno de sus elementos. Cada una de las cadenas en renglones_iris la vamos a separar por las comas y nos quedaremos con los primeros cuatro elementos (renglon.split(',')[:-1]).  Ya casi tenemos lo que necesitamos. Solamente faltaría convertir cada elemento a tipo flotante ya que como vemos son todas cadenas. Esto lo podemos hacer utilizando la función map() la cual aplica una función a cada elemento de la lista regresando una nueva. En este caso queremos utilizar la función float(). Veamos:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> [<span class="pl-en">map</span>(<span class="pl-s1">float</span>, <span class="pl-s1">renglon</span>.<span class="pl-en">split</span>(<span class="pl-s">','</span>)[:<span class="pl-c1">-</span><span class="pl-c1">1</span>]) <span class="pl-k">for</span> <span class="pl-s1">renglon</span> <span class="pl-c1">in</span>   <span class="pl-s1">renglones_iris</span>[:<span class="pl-c1">-</span><span class="pl-c1">2</span>]]
[[<span class="pl-c1">5.1</span>, <span class="pl-c1">3.5</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">4.9</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">4.7</span>, <span class="pl-c1">3.2</span>, <span class="pl-c1">1.3</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">4.6</span>, <span class="pl-c1">3.1</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">5.0</span>, <span class="pl-c1">3.6</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">5.4</span>, <span class="pl-c1">3.9</span>, <span class="pl-c1">1.7</span>, <span class="pl-c1">0.4</span>], [<span class="pl-c1">4.6</span>, <span class="pl-c1">3.4</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">0.3</span>], [<span class="pl-c1">5.0</span>, <span class="pl-c1">3.4</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">4.4</span>, <span class="pl-c1">2.9</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">4.9</span>, <span class="pl-c1">3.1</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.1</span>], [<span class="pl-c1">5.4</span>, <span class="pl-c1">3.7</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">4.8</span>, <span class="pl-c1">3.4</span>, <span class="pl-c1">1.6</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">4.8</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">0.1</span>], [<span class="pl-c1">4.3</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">1.1</span>, <span class="pl-c1">0.1</span>], [<span class="pl-c1">5.8</span>, <span class="pl-c1">4.0</span>, <span class="pl-c1">1.2</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">5.7</span>, <span class="pl-c1">4.4</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.4</span>], [<span class="pl-c1">5.4</span>, <span class="pl-c1">3.9</span>, <span class="pl-c1">1.3</span>, <span class="pl-c1">0.4</span>], [<span class="pl-c1">5.1</span>, <span class="pl-c1">3.5</span>, <span class="pl-c1">1.4</span>, <span class="pl-c1">0.3</span>], [<span class="pl-c1">5.7</span>, <span class="pl-c1">3.8</span>, <span class="pl-c1">1.7</span>, <span class="pl-c1">0.3</span>], [<span class="pl-c1">5.1</span>, <span class="pl-c1">3.8</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.3</span>], [<span class="pl-c1">5.4</span>, <span class="pl-c1">3.4</span>, <span class="pl-c1">1.7</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">5.1</span>, <span class="pl-c1">3.7</span>, <span class="pl-c1">1.5</span>, <span class="pl-c1">0.4</span>], [<span class="pl-c1">4.6</span>, <span class="pl-c1">3.6</span>, <span class="pl-c1">1.0</span>, <span class="pl-c1">0.2</span>], [<span class="pl-c1">5.1</span>, <span class="pl-c1">3.3</span>, <span class="pl-c1">1.7</span>, <span class="pl-c1">0.5</span>],[<span class="pl-c1">6.9</span>, <span class="pl-c1">3.1</span>, <span class="pl-c1">5.1</span>, <span class="pl-c1">2.3</span>], [<span class="pl-c1">5.8</span>, <span class="pl-c1">2.7</span>, <span class="pl-c1">5.1</span>, <span class="pl-c1">1.9</span>], [<span class="pl-c1">6.8</span>, <span class="pl-c1">3.2</span>, <span class="pl-c1">5.9</span>, <span class="pl-c1">2.3</span>], [<span class="pl-c1">6.7</span>, <span class="pl-c1">3.3</span>, <span class="pl-c1">5.7</span>, <span class="pl-c1">2.5</span>], [<span class="pl-c1">6.7</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">5.2</span>, <span class="pl-c1">2.3</span>], [<span class="pl-c1">6.3</span>, <span class="pl-c1">2.5</span>, <span class="pl-c1">5.0</span>, <span class="pl-c1">1.9</span>], [<span class="pl-c1">6.5</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">5.2</span>, <span class="pl-c1">2.0</span>], [<span class="pl-c1">6.2</span>, <span class="pl-c1">3.4</span>, <span class="pl-c1">5.4</span>, <span class="pl-c1">2.3</span>], [<span class="pl-c1">5.9</span>, <span class="pl-c1">3.0</span>, <span class="pl-c1">5.1</span>, <span class="pl-c1">1.8</span>]]</pre></div>
<p>Ya que obtuvimos el código paso a paso, vamos a utilizarlo para crear el nuevo arreglo:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">numpy</span>
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">iris_data</span> <span class="pl-c1">=</span> [<span class="pl-en">map</span>(<span class="pl-s1">float</span>, <span class="pl-s1">renglon</span>.<span class="pl-en">split</span>(<span class="pl-s">','</span>)[:<span class="pl-c1">-</span><span class="pl-c1">1</span>]) <span class="pl-k">for</span> <span class="pl-s1">renglon</span> <span class="pl-c1">in</span>   <span class="pl-s1">renglones_iris</span>[:<span class="pl-c1">-</span><span class="pl-c1">2</span>]]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">iris</span> <span class="pl-c1">=</span> <span class="pl-s1">numpy</span>.<span class="pl-en">array</span>(<span class="pl-s1">iris_data</span>)</pre></div>
<p>Listo ya tenemos nuestros datos en una estructura adecuada:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">iris</span>[:<span class="pl-c1">10</span>]
<span class="pl-en">array</span>([[ <span class="pl-c1">5.1</span>,  <span class="pl-c1">3.5</span>,  <span class="pl-c1">1.4</span>,  <span class="pl-c1">0.2</span>],
       [ <span class="pl-c1">4.9</span>,  <span class="pl-c1">3.</span> ,  <span class="pl-c1">1.4</span>,  <span class="pl-c1">0.2</span>],
       [ <span class="pl-c1">4.7</span>,  <span class="pl-c1">3.2</span>,  <span class="pl-c1">1.3</span>,  <span class="pl-c1">0.2</span>],
       [ <span class="pl-c1">4.6</span>,  <span class="pl-c1">3.1</span>,  <span class="pl-c1">1.5</span>,  <span class="pl-c1">0.2</span>],
       [ <span class="pl-c1">5.</span> ,  <span class="pl-c1">3.6</span>,  <span class="pl-c1">1.4</span>,  <span class="pl-c1">0.2</span>],
       [ <span class="pl-c1">5.4</span>,  <span class="pl-c1">3.9</span>,  <span class="pl-c1">1.7</span>,  <span class="pl-c1">0.4</span>],
       [ <span class="pl-c1">4.6</span>,  <span class="pl-c1">3.4</span>,  <span class="pl-c1">1.4</span>,  <span class="pl-c1">0.3</span>],
       [ <span class="pl-c1">5.</span> ,  <span class="pl-c1">3.4</span>,  <span class="pl-c1">1.5</span>,  <span class="pl-c1">0.2</span>],
       [ <span class="pl-c1">4.4</span>,  <span class="pl-c1">2.9</span>,  <span class="pl-c1">1.4</span>,  <span class="pl-c1">0.2</span>],
       [ <span class="pl-c1">4.9</span>,  <span class="pl-c1">3.1</span>,  <span class="pl-c1">1.5</span>,  <span class="pl-c1">0.1</span>]])</pre></div>
<h3>
<a id="user-content-paso-4-transformar-los-datos" class="anchor" href="#paso-4-transformar-los-datos" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 4: Transformar los datos</h3>
<p>En este caso sencillo no será necesario transformar los datos.</p>
<h3>
<a id="user-content-paso-5--seleccionar-la-tarea-de-minería-de-datos" class="anchor" href="#paso-5--seleccionar-la-tarea-de-miner%C3%ADa-de-datos" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 5:  Seleccionar la tarea de minería de datos</h3>
<p>La tarea que vamos a realizar será <em>Clasificación</em>.</p>
<h3>
<a id="user-content-paso-6--análisis-exploratorio" class="anchor" href="#paso-6--an%C3%A1lisis-exploratorio" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 6:  Análisis exploratorio</h3>
<p>La minería de datos en este primer ejercicio la vamos a realizar manualmente, para esto vamos a explorar los datos visualmente. Para ello utilizaremos la popular biblioteca <a href="https://matplotlib.org/" rel="nofollow">matplotlib</a>. Primero vamos a seleccionar las dos primeras características: ancho y largo del sépalo para ver si hay algún patrón útil. Importamos matplotlib y hacemos el plot de la primera flor. Los primeros cincuenta datos son de Iris Setosa:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-k">import</span> <span class="pl-s1">matplotlib</span>.<span class="pl-s1">pyplot</span> <span class="pl-k">as</span> <span class="pl-s1">plt</span>
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-s1">iris</span>[:<span class="pl-c1">50</span>,<span class="pl-c1">0</span>]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">y</span> <span class="pl-c1">=</span> <span class="pl-s1">iris</span>[:<span class="pl-c1">50</span>,<span class="pl-c1">1</span>]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">plot</span>(<span class="pl-s1">x</span>, <span class="pl-s1">y</span>, <span class="pl-s">'r.'</span>)
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">show</span>()</pre></div>
<p>Al ejecutar la instrucción plt.show() se debería mostrar lo siguiente:</p>
<p><a href="../img/plot1.png" target="_blank" rel="noopener noreferrer"><img src="../img/plot1.png" alt="Setosa" style="max-width:100%;"></a>{ width=70% }</p>
<p>En el eje <strong>x</strong> tenemos el ancho del sépalo Y en el eje <strong>y</strong> el largo, ambos en cm. El parámetro 'r.' indica que las flores Setosa se representarán por puntos rojos ('r.' red dots).</p>
<p>Ahora graficaremos al mismo tiempo las flores Setosa y Versicolor:</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">plot</span>( <span class="pl-s1">iris</span>[:<span class="pl-c1">50</span>,<span class="pl-c1">0</span>], <span class="pl-s1">iris</span>[:<span class="pl-c1">50</span>,<span class="pl-c1">1</span>], <span class="pl-s">'r.'</span>) <span class="pl-c"># Setosa</span>
[<span class="pl-c1">&lt;</span><span class="pl-s1">matplotlib</span>.<span class="pl-s1">lines</span>.<span class="pl-v">Line2D</span> <span class="pl-s1">object</span> <span class="pl-s1">at</span> <span class="pl-c1">0x1066ed610</span><span class="pl-c1">&gt;</span><span class="pl-s1"></span>]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">plot</span>( <span class="pl-s1">iris</span>[<span class="pl-c1">51</span>:<span class="pl-c1">100</span>,<span class="pl-c1">0</span>], <span class="pl-s1">iris</span>[<span class="pl-c1">51</span>:<span class="pl-c1">100</span>,<span class="pl-c1">1</span>], <span class="pl-s">'b.'</span>)
[<span class="pl-c1">&lt;</span><span class="pl-s1">matplotlib</span>.<span class="pl-s1">lines</span>.<span class="pl-v">Line2D</span> <span class="pl-s1">object</span> <span class="pl-s1">at</span> <span class="pl-c1">0x113731710</span><span class="pl-c1">&gt;</span><span class="pl-s1"></span>] <span class="pl-c"># Virginica</span>
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">show</span>()</pre></div>
<p>Descubrimos algo, es posible separar linealmente o clasificar ambas flores utilizando estas dos características:</p>
<p><a href="../img/plot2.png" target="_blank" rel="noopener noreferrer"><img src="../img/plot2.png" alt="Setosa y Virginica" style="max-width:100%;"></a></p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">plot</span>( <span class="pl-s1">iris</span>[<span class="pl-c1">51</span>:<span class="pl-c1">100</span>,<span class="pl-c1">0</span>], <span class="pl-s1">iris</span>[<span class="pl-c1">51</span>:<span class="pl-c1">100</span>,<span class="pl-c1">1</span>], <span class="pl-s">'b.'</span>)
[<span class="pl-c1">&lt;</span><span class="pl-s1">matplotlib</span>.<span class="pl-s1">lines</span>.<span class="pl-v">Line2D</span> <span class="pl-s1">object</span> <span class="pl-s1">at</span> <span class="pl-c1">0x114cae950</span><span class="pl-c1">&gt;</span><span class="pl-s1"></span>]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">plot</span>( <span class="pl-s1">iris</span>[<span class="pl-c1">101</span>:,<span class="pl-c1">0</span>], <span class="pl-s1">iris</span>[<span class="pl-c1">101</span>:,<span class="pl-c1">1</span>], <span class="pl-s">'g.'</span>)
[<span class="pl-c1">&lt;</span><span class="pl-s1">matplotlib</span>.<span class="pl-s1">lines</span>.<span class="pl-v">Line2D</span> <span class="pl-s1">object</span> <span class="pl-s1">at</span> <span class="pl-c1">0x114cbc110</span><span class="pl-c1">&gt;</span><span class="pl-s1"></span>]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">show</span>()</pre></div>
<p>Veremos si corremos con igual suerte al agregar la Versicolor:</p>
<div class="highlight highlight-source-python"><pre>[<span class="pl-c1">&lt;</span><span class="pl-s1">matplotlib</span>.<span class="pl-s1">lines</span>.<span class="pl-v">Line2D</span> <span class="pl-s1">object</span> <span class="pl-s1">at</span> <span class="pl-c1">0x114cae850</span><span class="pl-c1">&gt;</span><span class="pl-s1"></span>]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">plot</span>( <span class="pl-s1">iris</span>[<span class="pl-c1">51</span>:<span class="pl-c1">100</span>,<span class="pl-c1">0</span>], <span class="pl-s1">iris</span>[<span class="pl-c1">51</span>:<span class="pl-c1">100</span>,<span class="pl-c1">1</span>], <span class="pl-s">'b.'</span>)
[<span class="pl-c1">&lt;</span><span class="pl-s1">matplotlib</span>.<span class="pl-s1">lines</span>.<span class="pl-v">Line2D</span> <span class="pl-s1">object</span> <span class="pl-s1">at</span> <span class="pl-c1">0x114cae950</span><span class="pl-c1">&gt;</span><span class="pl-s1"></span>]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">plot</span>( <span class="pl-s1">iris</span>[<span class="pl-c1">101</span>:,<span class="pl-c1">0</span>], <span class="pl-s1">iris</span>[<span class="pl-c1">101</span>:,<span class="pl-c1">1</span>], <span class="pl-s">'g.'</span>)
[<span class="pl-c1">&lt;</span><span class="pl-s1">matplotlib</span>.<span class="pl-s1">lines</span>.<span class="pl-v">Line2D</span> <span class="pl-s1">object</span> <span class="pl-s1">at</span> <span class="pl-c1">0x114cbc110</span><span class="pl-c1">&gt;</span><span class="pl-s1"></span>]
<span class="pl-c1">&gt;&gt;</span><span class="pl-c1">&gt;</span> <span class="pl-s1">plt</span>.<span class="pl-en">show</span>()</pre></div>
<p><a href="../img/plot3.png" target="_blank" rel="noopener noreferrer"><img src="../img/plot3.png" alt="Setosa, Virginica, Versicolor" style="max-width:100%;"></a></p>
<p>Por lo menos al considerar estas dos características vemos que es difícil distinguir entre las flores Virginica y Versicolor.</p>
<h3>
<a id="user-content-paso-7--minería-de-datos" class="anchor" href="#paso-7--miner%C3%ADa-de-datos" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 7:  Minería de Datos</h3>
<p>Este paso lo vamos a hacer manualmente por lo pronto. ¿Como podríamos especificar el modelo?. Una manera muy sencilla sería la siguiente:</p>
<p><a href="../img/plot4.png" target="_blank" rel="noopener noreferrer"><img src="../img/plot4.png" alt="Setosa, Virginica, Versicolor" style="max-width:100%;"></a></p>
<p>Utilizando una recta para separar a las flores Setosa del resto. Podríamos además utilizar varias rectas o incluso funciones no lineales. Estas ideas las podremos llevar acabo "manualmente" ya que solo estamos considerando dos características. Esto se puede tornar más difícil al considerar las otras dos medidas pues estaríamos trabajando en dimensión cuatro.</p>
<p>Otra modelo podría ser expresado en forma de reglas:</p>
<pre><code>R1:
    SI sepal_length &lt; 5.9 AND sepal_width &gt; 2.9
    ENTONCES:
         Setosa

R2:
    SI sepal_length &lt; 4.7 AND sepal_width &lt;= 2.9
    ENTONCES:
         Setosa
</code></pre>
<p>Gráficamente sería algo como:</p>
<p><a href="../img/plot5.png" target="_blank" rel="noopener noreferrer"><img src="../img/plot5.png" alt="Setosa, Virginica, Versicolor" style="max-width:100%;"></a></p>
<p>Ya que estamos en esto podemos proponer un nuevo modelo simplemente agregando otra regla:</p>
<p><a href="../img/plot6.png" target="_blank" rel="noopener noreferrer"><img src="../img/plot6.png" alt="Setosa, Virginica, Versicolor" style="max-width:100%;"></a></p>
<p>Podríamos segur buscando, por ejemplo cambiando un poco los antecedentes de las reglas, por ejemplo de sepal_length &lt; 5.9 a sepal_length &lt; 6.0. Nos empezamos a dar cuenta que no es fácil hacer esto manualmente. Mejor hagamos programas que hagan este trabajo de generar modelos automáticamente. Es decir, algoritmos de aprendizaje automático.</p>
<h3>
<a id="user-content-paso-8-interpretar-y-evaluar" class="anchor" href="#paso-8-interpretar-y-evaluar" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 8. Interpretar y evaluar</h3>
<p>Esto lo haremos más adelante, pero vale la pena pensar un poco al respecto. ¿Cual es mejor modelo?, ¿El mejor es suficientemente bueno?, ¿Existe un modelo óptimo?. ¿Que pasará cuando agreguemos nuevas flores al conjunto de datos?.
También debemos pensar si pudimos extraer algún conocimiento nuevo. ¿Es útil?.</p>
<h3>
<a id="user-content-paso-9-aplicar-el-conocimiento-adquirido" class="anchor" href="#paso-9-aplicar-el-conocimiento-adquirido" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Paso 9. Aplicar el conocimiento adquirido</h3>
<p>De este pequeño ejercicio podríamos reportar que las flores Setosa son fáciles de identificar.</p>
<p>Este ejercicio es básico y además no hicimos todas las consideraciones. Más adelante veremos otros detalles que no hemos considerado y por supuesto ya no haremos la minería de datos manualmente. El ejercicio también ha servido para darnos idea de como trabajaremos con Python y sus bibliotecas para este tipo de tareas. Seguro te diste cuenta que no hemos utilizado ciclos, enviamos funciones como parámetros y trabajamos de forma interactiva para llegar a la solución.</p>
<h4>
<a id="user-content-atención-estudiantes" class="anchor" href="#atenci%C3%B3n-estudiantes" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Atención estudiantes:</h4>
<p>Si te fijas el proceso de KDD también puede ser utilizado como guía para hacer  proyectos de investigación en el área. El proceso es el mismo pero cambian los algoritmos, aplicaciones y tipos de datos.</p>
"""
from bs4 import BeautifulSoup
soup = BeautifulSoup(html, 'html.parser')

titles = [link for link in soup.find_all('a') if link.get('href') and link.get('href')[0] == "#" ]
documento = {}

for i,current_element in enumerate(titles):
    # Los links están dentro de un header, avanzamos a nivel del header
    header = current_element.parent
    href = header.a.get('href')
    documento[href] = []
    if i < len(titles)-1:
        while ( header != titles[i+1].parent):
            if hasattr(header, 'get_text') and header.get_text():
                documento[href].append(header.get_text())
            header =  header.next_sibling
    else:
        while (header.next_sibling):
            if hasattr(header, 'get_text') and header.get_text():
                documento[href].append(header.get_text())
            header =  header.next_sibling

for href in documento:
    print(href)
    print(" ".join(documento[href]))



